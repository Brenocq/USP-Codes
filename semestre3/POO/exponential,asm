.data
	str1: .asciiz "\n\tDigite um numero:"
	str2: .asciiz "\n\tDigite um expoente:"
.text
.globl main
main:
	# Pede um numero
	li $v0, 4
	la $a0, str1
	syscall
	
	li $v0, 5
	syscall
	addi $a1, $v0, 0
	
	# Pede um expoente
	li $v0, 4
	la $a0, str2
	syscall
	
	li $v0, 5
	syscall
	addi $a2, $v0, 0
	
	# Roda o fatorial
	jal exp
	
	addi $a0, $v0, 0
	li $v0, 1
	syscall
	
	li $v0, 10
	syscall
	
exp:
	sub $sp, $sp, 8 # Ajusta stack pra dois items
	sw $ra, 4($sp) # Guarda endereço de retorno
	sw $a1, 0($sp) # Gurarda argumento n
	
	slti $t0, $a2, 1 # Testa se exp<1
	beq $t0, $zero, L1 # Se exp>=1, chama L1, senão, retorna 1
	li $v0, 1 # Retorna 1
	
	add $sp, $sp, 8 # Libera o espaço da stack antes de retornar
	jr $ra # Retorna
	
L1:
	sub $a2, $a2, 1 # Nova chamada com (exp-1)
	jal exp # chama exponential (n, exp-1)
	
	# Ponto de retorno da chamada recursiva
	lw $a1, 0($sp) # Recupera argumento passado
	lw $ra, 4($sp) # Recupera endereço de retorno
	add $sp, $sp, 8 # Libera o espaço da stack
	
	mul $v0, $v0, $a1  # Calcula n^exp * n
	jr $ra